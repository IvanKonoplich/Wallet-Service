// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	entities "avitoTest/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockbalanceOperations is a mock of balanceOperations interface.
type MockbalanceOperations struct {
	ctrl     *gomock.Controller
	recorder *MockbalanceOperationsMockRecorder
}

// MockbalanceOperationsMockRecorder is the mock recorder for MockbalanceOperations.
type MockbalanceOperationsMockRecorder struct {
	mock *MockbalanceOperations
}

// NewMockbalanceOperations creates a new mock instance.s
func NewMockbalanceOperations(ctrl *gomock.Controller) *MockbalanceOperations {
	mock := &MockbalanceOperations{ctrl: ctrl}
	mock.recorder = &MockbalanceOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbalanceOperations) EXPECT() *MockbalanceOperationsMockRecorder {
	return m.recorder
}

// BalanceIncrease mocks base method.
func (m *MockbalanceOperations) BalanceIncrease(user entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceIncrease", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// BalanceIncrease indicates an expected call of BalanceIncrease.
func (mr *MockbalanceOperationsMockRecorder) BalanceIncrease(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceIncrease", reflect.TypeOf((*MockbalanceOperations)(nil).BalanceIncrease), user)
}

// CheckUser mocks base method.
func (m *MockbalanceOperations) CheckUser(userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockbalanceOperationsMockRecorder) CheckUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockbalanceOperations)(nil).CheckUser), userID)
}

// CreateUser mocks base method.
func (m *MockbalanceOperations) CreateUser(user entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockbalanceOperationsMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockbalanceOperations)(nil).CreateUser), user)
}

// GetBalance mocks base method.
func (m *MockbalanceOperations) GetBalance(userid int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", userid)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockbalanceOperationsMockRecorder) GetBalance(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockbalanceOperations)(nil).GetBalance), userid)
}

// TransferOfFunds mocks base method.
func (m *MockbalanceOperations) TransferOfFunds(transfer entities.Transfer, mustCheckIfEnough bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferOfFunds", transfer, mustCheckIfEnough)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferOfFunds indicates an expected call of TransferOfFunds.
func (mr *MockbalanceOperationsMockRecorder) TransferOfFunds(transfer, mustCheckIfEnough interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferOfFunds", reflect.TypeOf((*MockbalanceOperations)(nil).TransferOfFunds), transfer, mustCheckIfEnough)
}

// MockreserveOperations is a mock of reserveOperations interface.
type MockreserveOperations struct {
	ctrl     *gomock.Controller
	recorder *MockreserveOperationsMockRecorder
}

// MockreserveOperationsMockRecorder is the mock recorder for MockreserveOperations.
type MockreserveOperationsMockRecorder struct {
	mock *MockreserveOperations
}

// NewMockreserveOperations creates a new mock instance.
func NewMockreserveOperations(ctrl *gomock.Controller) *MockreserveOperations {
	mock := &MockreserveOperations{ctrl: ctrl}
	mock.recorder = &MockreserveOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreserveOperations) EXPECT() *MockreserveOperationsMockRecorder {
	return m.recorder
}

// CheckOrder mocks base method.
func (m *MockreserveOperations) CheckOrder(order entities.Order) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrder", order)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrder indicates an expected call of CheckOrder.
func (mr *MockreserveOperationsMockRecorder) CheckOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrder", reflect.TypeOf((*MockreserveOperations)(nil).CheckOrder), order)
}

// GetOrder mocks base method.
func (m *MockreserveOperations) GetOrder(order entities.Order) (entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", order)
	ret0, _ := ret[0].(entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockreserveOperationsMockRecorder) GetOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockreserveOperations)(nil).GetOrder), order)
}

// ReserveFunds mocks base method.
func (m *MockreserveOperations) ReserveFunds(order entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveFunds", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveFunds indicates an expected call of ReserveFunds.
func (mr *MockreserveOperationsMockRecorder) ReserveFunds(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveFunds", reflect.TypeOf((*MockreserveOperations)(nil).ReserveFunds), order)
}

// RevenueApproval mocks base method.
func (m *MockreserveOperations) RevenueApproval(order entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevenueApproval", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevenueApproval indicates an expected call of RevenueApproval.
func (mr *MockreserveOperationsMockRecorder) RevenueApproval(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevenueApproval", reflect.TypeOf((*MockreserveOperations)(nil).RevenueApproval), order)
}

// RevenueDeny mocks base method.
func (m *MockreserveOperations) RevenueDeny(order entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevenueDeny", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevenueDeny indicates an expected call of RevenueDeny.
func (mr *MockreserveOperationsMockRecorder) RevenueDeny(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevenueDeny", reflect.TypeOf((*MockreserveOperations)(nil).RevenueDeny), order)
}

// MockreportOperations is a mock of reportOperations interface.
type MockreportOperations struct {
	ctrl     *gomock.Controller
	recorder *MockreportOperationsMockRecorder
}

// MockreportOperationsMockRecorder is the mock recorder for MockreportOperations.
type MockreportOperationsMockRecorder struct {
	mock *MockreportOperations
}

// NewMockreportOperations creates a new mock instance.
func NewMockreportOperations(ctrl *gomock.Controller) *MockreportOperations {
	mock := &MockreportOperations{ctrl: ctrl}
	mock.recorder = &MockreportOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreportOperations) EXPECT() *MockreportOperationsMockRecorder {
	return m.recorder
}

// GetMonthReport mocks base method.
func (m *MockreportOperations) GetMonthReport(month string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthReport", month)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthReport indicates an expected call of GetMonthReport.
func (mr *MockreportOperationsMockRecorder) GetMonthReport(month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthReport", reflect.TypeOf((*MockreportOperations)(nil).GetMonthReport), month)
}

// MockoperationsJournal is a mock of operationsJournal interface.
type MockoperationsJournal struct {
	ctrl     *gomock.Controller
	recorder *MockoperationsJournalMockRecorder
}

// MockoperationsJournalMockRecorder is the mock recorder for MockoperationsJournal.
type MockoperationsJournalMockRecorder struct {
	mock *MockoperationsJournal
}

// NewMockoperationsJournal creates a new mock instance.
func NewMockoperationsJournal(ctrl *gomock.Controller) *MockoperationsJournal {
	mock := &MockoperationsJournal{ctrl: ctrl}
	mock.recorder = &MockoperationsJournalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoperationsJournal) EXPECT() *MockoperationsJournalMockRecorder {
	return m.recorder
}

// GetOperationsListByAmount mocks base method.
func (m *MockoperationsJournal) GetOperationsListByAmount(user entities.User) ([]entities.OperationsJournalRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsListByAmount", user)
	ret0, _ := ret[0].([]entities.OperationsJournalRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsListByAmount indicates an expected call of GetOperationsListByAmount.
func (mr *MockoperationsJournalMockRecorder) GetOperationsListByAmount(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsListByAmount", reflect.TypeOf((*MockoperationsJournal)(nil).GetOperationsListByAmount), user)
}

// GetOperationsListByDate mocks base method.
func (m *MockoperationsJournal) GetOperationsListByDate(user entities.User) ([]entities.OperationsJournalRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsListByDate", user)
	ret0, _ := ret[0].([]entities.OperationsJournalRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsListByDate indicates an expected call of GetOperationsListByDate.
func (mr *MockoperationsJournalMockRecorder) GetOperationsListByDate(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsListByDate", reflect.TypeOf((*MockoperationsJournal)(nil).GetOperationsListByDate), user)
}

// MocktransactionMaker is a mock of transactionMaker interface.
type MocktransactionMaker struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionMakerMockRecorder
}

// MocktransactionMakerMockRecorder is the mock recorder for MocktransactionMaker.
type MocktransactionMakerMockRecorder struct {
	mock *MocktransactionMaker
}

// NewMocktransactionMaker creates a new mock instance.
func NewMocktransactionMaker(ctrl *gomock.Controller) *MocktransactionMaker {
	mock := &MocktransactionMaker{ctrl: ctrl}
	mock.recorder = &MocktransactionMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionMaker) EXPECT() *MocktransactionMakerMockRecorder {
	return m.recorder
}

// BalanceIncrease mocks base method.
func (m *MocktransactionMaker) BalanceIncrease(user entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceIncrease", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// BalanceIncrease indicates an expected call of BalanceIncrease.
func (mr *MocktransactionMakerMockRecorder) BalanceIncrease(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceIncrease", reflect.TypeOf((*MocktransactionMaker)(nil).BalanceIncrease), user)
}

// CheckOrder mocks base method.
func (m *MocktransactionMaker) CheckOrder(order entities.Order) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrder", order)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrder indicates an expected call of CheckOrder.
func (mr *MocktransactionMakerMockRecorder) CheckOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrder", reflect.TypeOf((*MocktransactionMaker)(nil).CheckOrder), order)
}

// CheckUser mocks base method.
func (m *MocktransactionMaker) CheckUser(userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MocktransactionMakerMockRecorder) CheckUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MocktransactionMaker)(nil).CheckUser), userID)
}

// CreateUser mocks base method.
func (m *MocktransactionMaker) CreateUser(user entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MocktransactionMakerMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MocktransactionMaker)(nil).CreateUser), user)
}

// GetBalance mocks base method.
func (m *MocktransactionMaker) GetBalance(userid int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", userid)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MocktransactionMakerMockRecorder) GetBalance(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MocktransactionMaker)(nil).GetBalance), userid)
}

// GetMonthReport mocks base method.
func (m *MocktransactionMaker) GetMonthReport(month string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthReport", month)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthReport indicates an expected call of GetMonthReport.
func (mr *MocktransactionMakerMockRecorder) GetMonthReport(month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthReport", reflect.TypeOf((*MocktransactionMaker)(nil).GetMonthReport), month)
}

// GetOperationsListByAmount mocks base method.
func (m *MocktransactionMaker) GetOperationsListByAmount(user entities.User) ([]entities.OperationsJournalRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsListByAmount", user)
	ret0, _ := ret[0].([]entities.OperationsJournalRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsListByAmount indicates an expected call of GetOperationsListByAmount.
func (mr *MocktransactionMakerMockRecorder) GetOperationsListByAmount(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsListByAmount", reflect.TypeOf((*MocktransactionMaker)(nil).GetOperationsListByAmount), user)
}

// GetOperationsListByDate mocks base method.
func (m *MocktransactionMaker) GetOperationsListByDate(user entities.User) ([]entities.OperationsJournalRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsListByDate", user)
	ret0, _ := ret[0].([]entities.OperationsJournalRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsListByDate indicates an expected call of GetOperationsListByDate.
func (mr *MocktransactionMakerMockRecorder) GetOperationsListByDate(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsListByDate", reflect.TypeOf((*MocktransactionMaker)(nil).GetOperationsListByDate), user)
}

// GetOrder mocks base method.
func (m *MocktransactionMaker) GetOrder(order entities.Order) (entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", order)
	ret0, _ := ret[0].(entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MocktransactionMakerMockRecorder) GetOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MocktransactionMaker)(nil).GetOrder), order)
}

// ReserveFunds mocks base method.
func (m *MocktransactionMaker) ReserveFunds(order entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveFunds", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveFunds indicates an expected call of ReserveFunds.
func (mr *MocktransactionMakerMockRecorder) ReserveFunds(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveFunds", reflect.TypeOf((*MocktransactionMaker)(nil).ReserveFunds), order)
}

// RevenueApproval mocks base method.
func (m *MocktransactionMaker) RevenueApproval(order entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevenueApproval", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevenueApproval indicates an expected call of RevenueApproval.
func (mr *MocktransactionMakerMockRecorder) RevenueApproval(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevenueApproval", reflect.TypeOf((*MocktransactionMaker)(nil).RevenueApproval), order)
}

// RevenueDeny mocks base method.
func (m *MocktransactionMaker) RevenueDeny(order entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevenueDeny", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevenueDeny indicates an expected call of RevenueDeny.
func (mr *MocktransactionMakerMockRecorder) RevenueDeny(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevenueDeny", reflect.TypeOf((*MocktransactionMaker)(nil).RevenueDeny), order)
}

// TransferOfFunds mocks base method.
func (m *MocktransactionMaker) TransferOfFunds(transfer entities.Transfer, mustCheckIfEnough bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferOfFunds", transfer, mustCheckIfEnough)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferOfFunds indicates an expected call of TransferOfFunds.
func (mr *MocktransactionMakerMockRecorder) TransferOfFunds(transfer, mustCheckIfEnough interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferOfFunds", reflect.TypeOf((*MocktransactionMaker)(nil).TransferOfFunds), transfer, mustCheckIfEnough)
}
